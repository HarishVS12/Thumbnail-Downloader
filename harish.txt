package com.android.thumbnaidownloader;

import android.Manifest;
import android.app.DownloadManager;
import android.content.Context;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.Snackbar;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;


import com.facebook.shimmer.ShimmerFrameLayout;
import com.squareup.picasso.Picasso;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;


import java.io.File;
import java.io.IOException;
import java.net.URL;


import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class MainActivity extends AppCompatActivity {

    private TextView tv;
    private EditText ed;
    private Button sea,down;
    private ImageView im;
    private String ans;
    private String url;
    private String[] arr;
    Request req;
    OkHttpClient client;
    final String API_KEY = "AIzaSyApfu8BvWVs1J_IGm3Sm4ib63T056UdHJo";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final ShimmerFrameLayout sh = findViewById(R.id.shimmer);
        sh.startShimmer();

        ed = findViewById(R.id.url);
        tv = findViewById(R.id.thumbnail);
        sea = findViewById(R.id.search);
        im = findViewById(R.id.harish);
        down = findViewById(R.id.download);
        down.setEnabled(false);

        if(down.isPressed()){
            Toast.makeText(MainActivity.this,"Search the video",Toast.LENGTH_LONG).show();
        }
        if(CheckConnection()){
            Log.i("Net","It has net");
        }else{
            Toast.makeText(getApplicationContext(),"No Internt Connection",Toast.LENGTH_LONG).show();
        }

        client = new OkHttpClient();

        isStoragePermissionGranted();




        sea.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String uuu = ed.getText().toString();
                    if (CheckConnection()) {
                        if (uuu.contains("https://") || uuu.contains("http://") || uuu.contains(".com")) {
                            Log.i("Net", "It has Network");
                            url = "https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=1&q=" + uuu + "&key=" + API_KEY;
                            req = new Request.Builder()
                                    .url(url)
                                    .build();
                            req = new Request.Builder()
                                    .url(url)
                                    .build();
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                                if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED) {
                                    isStoragePermissionGranted();
                                }
                            }
                            makeHTTPrequest();
                            down.setEnabled(true);
                            sh.stopShimmer();
                        }else {
                            Snackbar s = Snackbar.make(v, "Enter a valid URL", Snackbar.LENGTH_LONG);
                            s.show();
                        }
                    } else
                        Toast.makeText(getApplicationContext(), "No Internt Connection", Toast.LENGTH_LONG).show();

            }

        });

        down.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED) {
                        isStoragePermissionGranted();
                    }else{
                        if(CheckConnection()){
                            Log.i("Net","It has net");
                            String s = "https://i.ytimg.com/vi/" + arr[arr.length-1] + "/maxresdefault.jpg";
                            Log.i("sing",s + " \n\n" + arr[arr.length-1]);
                            download(s,arr[1]);

                            for(int i=0; i<arr.length; i++){
                                Log.i("arr",arr[i] + " ");
                            }
                        }else{
                            Toast.makeText(getApplicationContext(),"No Internt Connection",Toast.LENGTH_LONG).show();
                        }
                    }
                }
            }
        });



    }

    private String JsonParsing(String res){
        String url = "";
        String tit = "";
        String id = "";
        try {
            JSONObject root = new JSONObject(res);
            JSONArray arr = root.getJSONArray("items");
            JSONObject first = arr.getJSONObject(0);
            JSONObject idid = first.getJSONObject("id");
            id = idid.getString("videoId");
            JSONObject snippet = first.getJSONObject("snippet");
            tit = snippet.getString("title");
            Log.i("id",id);
            JSONObject thumb = snippet.getJSONObject("thumbnails");
            JSONObject high = thumb.getJSONObject("high");
            url = high.getString("url");
            return url + " " + tit + " " + id;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return url + " " + tit + " " + id;
    }

    private void download(String url,String fName){
        String DIR_NAME = "Harish";
        String filename = fName+".jpg";
        String downloadUrlOfImage = url;
        File direct =
                new File(Environment
                        .getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)
                        .getAbsolutePath() + "/" + DIR_NAME + "/");


        if (!direct.exists()) {
            direct.mkdir();
            Log.d("BOI", "dir created for first time");
        }

        DownloadManager dm = (DownloadManager) getApplicationContext().getSystemService(Context.DOWNLOAD_SERVICE);
        Uri downloadUri = Uri.parse(downloadUrlOfImage);
        DownloadManager.Request request = new DownloadManager.Request(downloadUri);
        request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI | DownloadManager.Request.NETWORK_MOBILE)
                .setAllowedOverRoaming(false)
                .setTitle(filename)
                .setMimeType("image/jpeg")
                .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
                .setDestinationInExternalPublicDir(Environment.DIRECTORY_PICTURES,
                        File.separator + DIR_NAME + File.separator + filename);

        dm.enqueue(request);
    }

    private void makeHTTPrequest(){
        client.newCall(req).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
//                tv.setText("Data Cannot be Parsed!");
                Log.i("Hairsh","ERRORRRRE");
                MainActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
//                        tv.setText("ERROOORRRR");
                        Toast.makeText(MainActivity.this,"No Response from the Server",Toast.LENGTH_LONG).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if(response.isSuccessful()){
                    final String res = response.body().string();
                    MainActivity.this.runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            ans = JsonParsing(res);
                            arr = ans.split(" ");
                            Picasso.get().load(arr[0]).into(im);
//                            tv.setText(ans);
                        }
                    });
                }
            }
        });
    }

    public  boolean isStoragePermissionGranted() {
            String TAG = "asd";
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    == PackageManager.PERMISSION_GRANTED) {
                Log.v(TAG,"Permission is granted");
                return true;
            } else {

                Log.v(TAG,"Permission is revoked");
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
                return false;
            }
        }
        else { //permission is automatically granted on sdk<23 upon installation
            Log.v(TAG,"Permission is granted");
            return true;
        }
    }
    private boolean CheckConnection(){
        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();

        return networkInfo!=null && networkInfo.isConnected();
    }


}
